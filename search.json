[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Running-nonmem.html","id":"slurmtools-for-submitting-nonmem-runs","dir":"Articles","previous_headings":"","what":"Slurmtools for submitting NONMEM runs","title":"Running Nonmem with slurmtools","text":"slurmtools R package interacting slurm (fka Simple Linux Utility Resource Management) submitting NONMEM jobs. can submit NONMEM job submit_nonmem_model, can view current jobs get_slurm_jobs, can see available partitions get_slurm_partitions.","code":""},{"path":"/articles/Running-nonmem.html","id":"installing-slurmtools","dir":"Articles","previous_headings":"Slurmtools for submitting NONMEM runs","what":"Installing slurmtools","title":"Running Nonmem with slurmtools","text":"install slurmtools use following commands: given message loading slurmtools options set default job submission work without . options used default arguments submit_nonmem_model function. Running ?submit_nonmem_model can see documentation","code":"library(slurmtools) #>  #>  #> ── Needed slurmtools options ─────────────────────────────────────────────────── #> ✖ option('slurmtools.slurm_job_template_path') is not set. #> ✖ option('slurmtools.submission_root') is not set. #> ✖ option('slurmtools.bbi_config_path') is not set. #> ℹ Please set all options for job submission defaults to work."},{"path":"/articles/Running-nonmem.html","id":"default-variables-and-values-provided-to-the-template","dir":"Articles","previous_headings":"Slurmtools for submitting NONMEM runs","what":"Default variables and values provided to the template","title":"Running Nonmem with slurmtools","text":"function uses inputs populate template Bash shell script submits NONMEM job slurm. default template file supplied Project Starter can modified additional tasks long possible within Bash. default values provided slurm template file: partition argument submit_nonmem_model default first element get_slurm_partitions() parallel TRUE ncpu > 1, else FALSE ncpu argument submit_nonmem_model - input ncpu must less equal number cpus partition job_name created .mod argument supplied submit_nonmem_model - default <nonmem_model_name>-nonmem-run project_path determined ::() root Rproject project_name determined ::() %>% basename() - project slurmtools bbi_exe_path determined via `Sys.(“bbi”) bbi_config_path determined via getOption(“slurmtools.bbi_config_path”) model_path determined .mod argument supplied submit_nonmem_model config_toml_path determined .mod argument supplied submit_nonmem_model required use nmm (NONMEM monitor) nmm_exe_path determined via Sys.(\"nmm\") need feed arguments template simply supply slurm_template_opts argument list. later.","code":"default_template_list = list(   partition = partition,   parallel = parallel,   ncpu = ncpu,   job_name = sprintf(\"%s-nonmem-run\", basename(.mod$absolute_model_path)),   project_path = project_path,   project_name = project_name,   bbi_exe_path = Sys.which(\"bbi\"),   bbi_config_path = bbi_config_path,   model_path = .mod$absolute_model_path,   config_toml_path = config_toml_path,   nmm_exe_path = Sys.which(\"nmm\") )"},{"path":"/articles/Running-nonmem.html","id":"submitting-a-nonmem-job-with-bbi","dir":"Articles","previous_headings":"Slurmtools for submitting NONMEM runs","what":"Submitting a NONMEM job with bbi","title":"Running Nonmem with slurmtools","text":"submit NONMEM job, need supply either path mod file create model object bbr, supply slurm-template.tmpl file. use bbi also need bbi.yaml file, ’ve also supplied /model/nonmem/bbi.yaml (also supplied R project starter). example template file call bbi: file call bbi run supplied model ({{model_path}}.mod) ncpu > 1 parallel true code {{#parallel}} {{/parallel}} populated. ncpu = 1 parallel false code {{^parallel}} {{/parallel}} populated. default, submit_nonmem_model inject Sys.(\"bbi\") template, bbi path ’ll supply bbi_exe_path start NONMEM run. use different template files different functionality ’ll inject template file paths submit_nonmem_model. However, ’ll use submission-log directory output, ’ll set option well bbi_config_path submit_nonmem_model defaults can used. slurm template files saved ~/model/nonmem/ Additionally, simple NONMEM control stream 1001.mod directory can use testing. create bbr model object, need 1001.mod 1001.yaml contains metadata model supplied directory (./model/nonmem/). ’ll check mod_number.yaml exists, read model otherwise create read . can now submit job point template file model/nonmem/slurm-job-bbi.tmpl. see status exit code 0 suggesting successful command, stdout gives us batch job number. can use slurmtools::get_slurm_jobs() monitor status job. , can supply user = “matthews” argument filter just jobs ’ve submitted. look slurmtools.submisstion_root directory can see shell script generated submit_nonmem_model. whisker replaced call bbi:","code":"#!/bin/bash #SBATCH --job-name=\"{{job_name}}\" #SBATCH --nodes=1 #SBATCH --ntasks=1 #SBATCH --cpus-per-task={{ncpu}} #SBATCH --partition={{partition}} #SBATCH --account={{project_name}}  #{{project_path}} # submit_nonmem_model uses the whisker package to populate template files # https://github.com/edwindj/whisker  {{#parallel}} {{bbi_exe_path}} nonmem run local {{model_path}}.mod --parallel --threads={{ncpu}} --config {{bbi_config_path}} {{/parallel}}   {{^parallel}} {{bbi_exe_path}} nonmem run local {{model_path}}.mod --config {{bbi_config_path}} {{/parallel}} Sys.which(\"bbi\") #> bbi  #>  \"\" library(bbr) library(here) #> here() starts at /home/runner/work/slurmtools/slurmtools  nonmem = file.path(here::here(), \"vignettes\", \"model\", \"nonmem\")  options('slurmtools.submission_root' = file.path(nonmem, \"submission-log\")) options('slurmtools.bbi_config_path' = file.path(nonmem, \"bbi.yaml\")) mod_number <- \"1001\"  if (file.exists(file.path(nonmem, paste0(mod_number, \".yaml\")))) {   mod <- bbr::read_model(file.path(nonmem, mod_number)) } else {   mod <- bbr::new_model(file.path(nonmem, mod_number)) } submission <- slurmtools::submit_nonmem_model(   mod,   overwrite = TRUE,   slurm_job_template_path = file.path(nonmem, \"slurm-job-bbi.tmpl\"), )  submission #> $status #> [1] 0 #>  #> $stdout #> [1] \"Submitted batch job 804\\n\" #>  #> $stderr #> [1] \"\" #>  #> $timeout #> [1] FALSE slurmtools::get_slurm_jobs(user = \"matthews\") #> # A tibble: 1 × 12 #>   job_id partition  user_name job_state time    cpus standard_input #>    <int> <chr>      <chr>     <chr>     <time> <int> <chr>          #> 1   1159 cpu2mem4gb matthews  COMPLETED 00'13\"     1 /dev/null      #> # ℹ 5 more variables: standard_output <chr>, submit_time <dttm>, #> #   start_time <dttm>, end_time <dttm>, current_working_directory <chr> #!/bin/bash #SBATCH --job-name=\"1001-nonmem-run\" #SBATCH --nodes=1 #SBATCH --ntasks=1 #SBATCH --cpus-per-task=1 #SBATCH --partition=cpu2mem4gb #SBATCH --account=slurmtools  #/cluster-data/user-homes/matthews/Packages/slurmtools # submit_nonmem_model uses the whisker package to populate template files # https://github.com/edwindj/whisker  /usr/local/bin/bbi nonmem run local /cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001.mod --config /cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/bbi.yaml"},{"path":"/articles/Running-nonmem.html","id":"extending-templates","dir":"Articles","previous_headings":"Slurmtools for submitting NONMEM runs","what":"Extending templates","title":"Running Nonmem with slurmtools","text":"templates create bash shell script almost infinite number things can template. Anything can bash can appropriately updating template file injecting needed information! Let’s add notification feature send notification job started finished. can use ntfy.sh add necessary info template achieve . modified template file adds JOBID=$SLURM_JOBID ntfy calls. get notification can supply submit_nonmem_model ntfy variable send notifications. ’ll use ntfy = ntfy_demo . Since ’ve already run model provide overwrite = TRUE argument force new nonmem run. get 0 exit code status now instead using slurmtools::get_slurm_jobs() monitor job, can rely new notifications just set . run finished get another notification: Note run number match run specified submission$stdout. can see new shell script updated template file generated reiterate, template file run bash shell script anything can bash can put template pass needed arguments customize behavior liking.","code":"#!/bin/bash #SBATCH --job-name=\"{{job_name}}\" #SBATCH --nodes=1 #SBATCH --ntasks=1 #SBATCH --cpus-per-task={{ncpu}} #SBATCH --partition={{partition}} #SBATCH --account={{project_name}}  JOBID=$SLURM_JOBID  # submit_nonmem_model uses the whisker package to populate template files # https://github.com/edwindj/whisker  {{#ntfy}} curl -d \"Starting model run: {{job_name}} $JOBID\" ntfy.sh/{{ntfy}} {{/ntfy}}  {{#parallel}} {{bbi_exe_path}} nonmem run local {{model_path}}.mod --parallel --threads={{ncpu}} --config {{bbi_config_path}} {{/parallel}}  {{^parallel}} {{bbi_exe_path}} nonmem run local {{model_path}}.mod --config {{bbi_config_path}} {{/parallel}}  {{#ntfy}} curl -d \"Finished model run: {{job_name}} $JOBID\" ntfy.sh/{{ntfy}} {{/ntfy}} submission_ntfy <- slurmtools::submit_nonmem_model(   mod,    slurm_job_template_path = file.path(nonmem, \"slurm-job-bbi-ntfy.tmpl\"),   overwrite = TRUE,   slurm_template_opts = list(     ntfy = \"ntfy_demo\") )  submission_ntfy #> $status #> [1] 0 #>  #> $stdout #> [1] \"Submitted batch job 804\\n\" #>  #> $stderr #> [1] \"\" #>  #> $timeout #> [1] FALSE #!/bin/bash #SBATCH --job-name=\"1001-nonmem-run\" #SBATCH --nodes=1 #SBATCH --ntasks=1 #SBATCH --cpus-per-task=1 #SBATCH --partition=cpu2mem4gb #SBATCH --account=slurmtools  JOBID=$SLURM_JOBID  curl -d \"Starting model run: 1001-nonmem-run $JOBID\" ntfy.sh/ntfy_demo  /usr/local/bin/bbi nonmem run local /cluster-data/user-homes/matthews/Projects/slurmtools_vignette/model/nonmem/1001.mod --config /cluster-data/user-homes/matthews/Projects/slurmtools_vignette/model/nonmem/bbi.yaml  curl -d \"Finished model run: 1001-nonmem-run $JOBID\" ntfy.sh/ntfy_demo"},{"path":"/articles/custom-alerts.html","id":"submitting-a-nonmem-job-with-nmm","dir":"Articles","previous_headings":"","what":"Submitting a NONMEM job with nmm","title":"Custom-alerts","text":"Instead using bbi can use nmm (NONMEM Monitor) currently additional functionality sending notifications zero gradients, missing -1E9 lines ext file, basic control stream errors. Nonmem-monitor also allows setting alerter better fed messages - later. use nmm can install latest release github repository linked . can update template file accordingly: default, submit_nonmem_model provide nmm_exe_path config_toml_path template. Just like bbi_exe_path, nmm_exe_path determined Sys.(\"nmm\") may may give path nmm binary path . can inject nmm_exe_path like bbi_exe_path assume ’s path. config.toml file controls nmm monitor look files alert . ’ll use generate_nmm_config() create file. First can look documentation see type information pass function. ?generate_nmm_config() generates following toml file. passing just mod object, nmm use default values options need change files tracked, many threads use ’ll explicitly pass generate_nmm_config. Since ’re vignettes ’ll need update watched_dir output_dir accordingly. updates 1001.toml config file : can now run submit_nonmem_model get essentially behavior running bbi. linux ~/.local/bin/ path saving downloaded binaries good approach. one difference using nmm compared bbi new directory created contains log file caught issues run. file updated nonmem running monitors gradient values, parameters hit zero, well errors bbi. Looking first lines can see bbi successfully able call nonmem. also see info level log OMEGA(2,1) 0 value – mod file don’t specify omega values diagonal fixed 0. Finally see GRD(6) hit 0 relatively early run. run finished several messages sent log final check files listed files_to_track field 1001.toml file. see GRD(6) hit zero run subset -1E9 lines present .ext file.","code":"#!/bin/bash  #SBATCH --job-name=\"{{job_name}}\"  #SBATCH --nodes=1  #SBATCH --ntasks=1 #SBATCH --cpus-per-task={{ncpu}}  #SBATCH --partition={{partition}}  {{nmm_exe_path}} -c {{config_toml_path}} run mod_number <- \"1001\"  if (file.exists(file.path(nonmem, paste0(mod_number, \".yaml\")))) {   mod <- bbr::read_model(file.path(nonmem, mod_number)) } else {   mod <- bbr::new_model(file.path(nonmem, mod_number)) } slurmtools::generate_nmm_config(mod) model_number = '1001' watched_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/model/nonmem' output_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/model/nonmem/in_progress' slurmtools::generate_nmm_config(    mod,    watched_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem\",   output_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress\") model_number = '1001' watched_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem' output_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress' submission_nmm <- slurmtools::submit_nonmem_model(    mod,    overwrite = TRUE,   slurm_job_template_path = file.path(nonmem, \"slurm-job-nmm.tmpl\"),   slurm_template_opts = list(     nmm_exe_path = normalizePath(\"~/.local/bin/nmm\")) ) #> Warning in normalizePath(\"~/.local/bin/nmm\"): #> path[1]=\"/home/runner/.local/bin/nmm\": No such file or directory  submission_nmm #> $status #> [1] 0 #>  #> $stdout #> [1] \"Submitted batch job 804\\n\" #>  #> $stderr #> [1] \"\" #>  #> $timeout #> [1] FALSE slurmtools::get_slurm_jobs(user = \"matthews\") #> # A tibble: 1 × 12 #>   job_id partition  user_name job_state time    cpus standard_input #>    <int> <chr>      <chr>     <chr>     <time> <int> <chr>          #> 1   1159 cpu2mem4gb matthews  COMPLETED 00'13\"     1 /dev/null      #> # ℹ 5 more variables: standard_output <chr>, submit_time <dttm>, #> #   start_time <dttm>, end_time <dttm>, current_working_directory <chr> 19:13:45 [INFO] bbi log: time=\"2024-09-20T19:13:45Z\" level=info msg=\"Successfully loaded default configuration from /cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/bbi.yaml\" 19:13:45 [INFO] bbi log: time=\"2024-09-20T19:13:45Z\" level=info msg=\"Beginning Local Path\" 19:13:45 [INFO] bbi log: time=\"2024-09-20T19:13:45Z\" level=info msg=\"A total of 1 models have completed the initial preparation phase\" 19:13:45 [INFO] bbi log: time=\"2024-09-20T19:13:45Z\" level=info msg=\"[1001] Beginning local work phase\" 19:14:16 [INFO] \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001/1001.ext\": Iteration: 5, Parameter(s) that hit zero: [\"SIGMA(2,1)\", \"OMEGA(2,1)\"] 19:14:19 [INFO] \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001/1001.ext\": Iteration: 10, Parameter(s) that hit zero: [\"OMEGA(2,1)\", \"SIGMA(2,1)\"] 19:14:21 [INFO] \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001/1001.ext\": Iteration: 15, Parameter(s) that hit zero: [\"SIGMA(2,1)\", \"OMEGA(2,1)\"] 19:14:21 [WARN] \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001/1001.grd\" Iteration: 10, has 0 gradient for parameter(s): [\"GRD(6)\"] 19:14:31 [INFO] Received Exit code: exit status: 0 19:14:31 [WARN] 1001.ext: Missing ext final output lines. Observed lines were: [-1000000000.0, -1000000004.0, -1000000006.0, -1000000007.0] 19:14:31 [WARN] \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/1001/1001.grd\": The following parameters hit zero gradient through the run: [\"GRD(6)\"]"},{"path":"/articles/custom-alerts.html","id":"getting-alerted-during-a-run","dir":"Articles","previous_headings":"","what":"Getting alerted during a run","title":"Custom-alerts","text":"Like bbi altering slurm template file get notifications ntfy.sh nmm feature built ! messages log file relate zero gradients, missing -1E9 lines, 0 parameter values can also sent ntfy altering 1001.toml file. can get alerts real time without dig noisy log file. Let’s update call generate_nmm_config nmm send notifications NONMEMmonitor topic ntfy.sh. Just like submit_nonmem_model can feed additional information template slurm_template_opts, can add alerter feature nmm alerter_opts. go ntfy.sh can see send message ntfy can run curl -d \"Backup successful 😀\"  ntfy.sh/mytopic. nmm can call binary command pass message flag. ntfy, binary curl message flag d command ntfy.sh/mytopic additional args. updates 1001.toml file : re-run submit_nonmem_model call now get ntfy notifications. One thing note nmm print full paths log, send notifications model_number (model_number.file_extension). gives us notifications much digestible format","code":"slurmtools::generate_nmm_config(    mod,    watched_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem\",   output_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress\",   alerter_opts = list(     alerter = Sys.which('curl'), #binary location of curl,     command = \"ntfy.sh/NONMEMmonitor\",     message_flag = \"d\"   ) ) model_number = '1001' watched_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem' output_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress'  [alerter] alerter = '/usr/bin/curl' command = 'ntfy.sh/NONMEMmonitor' message_flag = 'd' submission_nmm <- slurmtools::submit_nonmem_model(    mod,    overwrite = TRUE,   slurm_job_template_path = file.path(nonmem, \"slurm-job-nmm.tmpl\"),   slurm_template_opts = list(     nmm_exe_path = normalizePath(\"~/.local/bin/nmm\")) ) #> Warning in normalizePath(\"~/.local/bin/nmm\"): #> path[1]=\"/home/runner/.local/bin/nmm\": No such file or directory  submission_nmm #> $status #> [1] 0 #>  #> $stdout #> [1] \"Submitted batch job 804\\n\" #>  #> $stderr #> [1] \"\" #>  #> $timeout #> [1] FALSE slurmtools::get_slurm_jobs(user = \"matthews\") #> # A tibble: 1 × 12 #>   job_id partition  user_name job_state time    cpus standard_input #>    <int> <chr>      <chr>     <chr>     <time> <int> <chr>          #> 1   1159 cpu2mem4gb matthews  COMPLETED 00'13\"     1 /dev/null      #> # ℹ 5 more variables: standard_output <chr>, submit_time <dttm>, #> #   start_time <dttm>, end_time <dttm>, current_working_directory <chr>"},{"path":"/articles/slack-alerts.html","id":"cut-me-some-slack","dir":"Articles","previous_headings":"","what":"Cut me some Slack","title":"Slack notifications with nmm","text":"also functionality pair nmm slack_notifier get messages sent directly via slack bot. requires download slack_notifier binaries. can download latest release extract binary save ~/.local/bin. snt requires slack bot OAuth token found https://api.slack.com/apps/<YOUR_APP_ID>/oauth?. can saved file fed snt tokenFile flag. , need update 1001.toml file get slack notifications. look snt help message see called via snt slack -c config_file -k decryption_key -token -f tokenFile -e email -m message -t timestamp config_file can contain key (using default snt key), token file don’t need repeatedly use information. ’ve saved tokenFile location config file ~/.local/bin/slack_notifier_settings.yaml use -c flag point . call snt look like: snt slack -c ~/.local/bin/slack_notifier_settings.yaml -e matthews@a2-ai.com -m \"Hello\" timestamp flag needed want reply message, save spamming alerts want . However, since can’t possible know timestamp message yet send don’t way specifying argument now. use_stdout argument nmm alerter . capture standard call alerter binary parse additional flags use subsequent calls. mind, can update nmm config achieve slack messaging. generates following toml file: alert = 'Slack' email set 1001.toml file nmm send slack notifications directly NONMEM run starts reply message notifications gradients hit 0 run finishes checks -1E9 lines present .ext file gives another message parameters hit 0 gradient.","code":"Sys.which(\"snt\")                                                snt  \"/cluster-data/user-homes/matthews/.local/bin/snt\" token: \"encrypted(Bot User OAuth Token)\" slurmtools::generate_nmm_config(    mod,    watched_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem\",   output_dir = \"/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress\",   alerter_opts = list(     alerter = normalizePath('~/.local/bin/snt'), #binary location of nmm,     command = \"slack\",     message_flag = \"m\", #This is the default so we don't need to specify it     use_stdout = TRUE, #captures output of snt -- which will include --timestamp aksfl;ajklajl;     args = list(email = \"matthews@a2-ai.com\", config = \"/cluster-data/user-homes/matthews/.local/bin/slack_notifier_settings.yaml\")   )   ) #> Warning in normalizePath(\"~/.local/bin/snt\"): #> path[1]=\"/home/runner/.local/bin/snt\": No such file or directory model_number = '1001' watched_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem' output_dir = '/cluster-data/user-homes/matthews/Packages/slurmtools/vignettes/model/nonmem/in_progress'  [alerter] alerter = '/cluster-data/user-homes/matthews/.local/bin/snt' command = 'slack' message_flag = 'm' use_stdout = true  [alerter.args] email = 'matthews@a2-ai.com' config = '/cluster-data/user-homes/matthews/.local/bin/slack_notifier_settings.yaml' submission_nmm <- slurmtools::submit_nonmem_model(    mod,    overwrite = TRUE,   slurm_job_template_path = file.path(nonmem, \"slurm-job-nmm.tmpl\"),   slurm_template_opts = list(     nmm_exe_path = normalizePath(\"~/.local/bin/nmm\")   ) ) #> Warning in normalizePath(\"~/.local/bin/nmm\"): #> path[1]=\"/home/runner/.local/bin/nmm\": No such file or directory  submission_nmm #> $status #> [1] 0 #>  #> $stdout #> [1] \"Submitted batch job 804\\n\" #>  #> $stderr #> [1] \"\" #>  #> $timeout #> [1] FALSE slurmtools::get_slurm_jobs(user = 'matthews') #> # A tibble: 1 × 12 #>   job_id partition  user_name job_state time    cpus standard_input #>    <int> <chr>      <chr>     <chr>     <time> <int> <chr>          #> 1   1159 cpu2mem4gb matthews  COMPLETED 00'13\"     1 /dev/null      #> # ℹ 5 more variables: standard_output <chr>, submit_time <dttm>, #> #   start_time <dttm>, end_time <dttm>, current_working_directory <chr>"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Devin Pastoor. Author, maintainer. Jenna Elwing. Author. Matthew Smith. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastoor D, Elwing J, Smith M (2024). slurmtools: slurm tooling. R package version 0.0.0.9001.","code":"@Manual{,   title = {slurmtools: slurm tooling},   author = {Devin Pastoor and Jenna Elwing and Matthew Smith},   year = {2024},   note = {R package version 0.0.0.9001}, }"},{"path":"/index.html","id":"slurmtools","dir":"","previous_headings":"","what":"slurm tooling","title":"slurm tooling","text":"slurmtools collection utility functions suitable interacting slurm submitting nonmem jobs.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"slurm tooling","text":"can install development version slurmtools GitHub :","code":"# install.packages(\"pak\") pak::pkg_install(\"a2-ai/slurmtools\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"slurm tooling","text":"basic example shows solve common problem:","code":"library(slurmtools) #> ── Needed slurmtools options ─────────────────────────────────────────────────── #> ✖ option('slurmtools.slurm_job_template_path') is not set. #> ✖ option('slurmtools.submission_root') is not set. #> ✖ option('slurmtools.bbi_config_path') is not set. #> ℹ Please set all options for job submission defaults to work. knitr::kable(get_slurm_jobs())"},{"path":"/reference/generate_nmm_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a default watcher configuration file — generate_nmm_config","title":"Creates a default watcher configuration file — generate_nmm_config","text":"Creates default watcher configuration file","code":""},{"path":"/reference/generate_nmm_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a default watcher configuration file — generate_nmm_config","text":"","code":"generate_nmm_config(   .mod,   model_number = NULL,   files_to_track = NULL,   tmp_dir = NULL,   watched_dir = file.path(\"model\", \"nonmem\"),   output_dir = file.path(watched_dir, \"in_progress\"),   poll_duration = NULL,   level = NULL,   threads = NULL,   alerter_opts = list() )"},{"path":"/reference/generate_nmm_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a default watcher configuration file — generate_nmm_config","text":".mod bbi nonmem model object model_number string model number e.g. 101a15. Default pulled .mod files_to_track vector file extensions. left blank, nmm use .ext, .lst. .grd. tmp_dir temporary directory location run nonmem. left blank nmm use /tmp watched_dir directory nonmem output. Default ::()/model/nonmem output_dir directory watcher place log output files default ::()/model/nonmem/in_progress poll_duration amount time seconds watchers polling. left blank, nmm use 1 second level level log . Available options Trace, Debug, Info, Warn, Fatal left blank, nmm use Info threads number threads running parallel job. left blank nmm use 1 alerter_opts list setting alerter fields needed alerter, command, message_flag, use_stdout, args (list additional args passed alerter)","code":""},{"path":"/reference/generate_nmm_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a default watcher configuration file — generate_nmm_config","text":"none","code":""},{"path":"/reference/generate_nmm_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a default watcher configuration file — generate_nmm_config","text":"","code":"if (FALSE) { # \\dontrun{   generate_nmm_config(.mod) } # }"},{"path":"/reference/get_slurm_jobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","title":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","text":"Gets jobs run slurm tibble","code":""},{"path":"/reference/get_slurm_jobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","text":"","code":"get_slurm_jobs(user = NULL)"},{"path":"/reference/get_slurm_jobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","text":"user optional user name filter jobs submitted user","code":""},{"path":"/reference/get_slurm_jobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","text":"tibble containing jobs submitted slurm","code":""},{"path":"/reference/get_slurm_jobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the jobs run on slurm as a tibble — get_slurm_jobs","text":"","code":"if (FALSE) { # \\dontrun{ get_slurm_jobs() } # }"},{"path":"/reference/get_slurm_partitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the available slurm partitions the user can use. — get_slurm_partitions","title":"Gets the available slurm partitions the user can use. — get_slurm_partitions","text":"Gets available slurm partitions user can use.","code":""},{"path":"/reference/get_slurm_partitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the available slurm partitions the user can use. — get_slurm_partitions","text":"","code":"get_slurm_partitions(cache = TRUE)"},{"path":"/reference/get_slurm_partitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the available slurm partitions the user can use. — get_slurm_partitions","text":"cache optional argument forgo caching","code":""},{"path":"/reference/get_slurm_partitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the available slurm partitions the user can use. — get_slurm_partitions","text":"vector available partitions","code":""},{"path":"/reference/get_slurm_partitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets the available slurm partitions the user can use. — get_slurm_partitions","text":"","code":"if (FALSE) { # \\dontrun{ get_slurm_partitions } # }"},{"path":"/reference/slurmtools.html","id":null,"dir":"Reference","previous_headings":"","what":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","title":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","text":"package aims ease submission monitoring NONMEM jobs running slurm.","code":""},{"path":"/reference/slurmtools.html","id":"submitting-jobs","dir":"Reference","previous_headings":"","what":"submitting jobs","title":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","text":"submit_nonmem_model: Submits job slurm generate_nmm_config: Generates NONMEMmonitor config file","code":""},{"path":"/reference/slurmtools.html","id":"monitoring-jobs","dir":"Reference","previous_headings":"","what":"monitoring jobs","title":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","text":"get_slurm_jobs: Gives table submitted jobs slurm shows status information given squeue","code":""},{"path":"/reference/slurmtools.html","id":"slurm-partitions","dir":"Reference","previous_headings":"","what":"slurm partitions","title":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","text":"get_slurm_partitions: Gives vector available partitions user can submit jobs .","code":""},{"path":"/reference/slurmtools.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"slurmtools: An R package for easily submitting NONMEM jobs to slurm. — slurmtools","text":"Maintainer: Devin Pastoor devin@a2-ai.com Authors: Jenna Elwing jenna@a2-ai.com Matthew Smith matthews@a2-ai.com","code":""},{"path":"/reference/submit_nonmem_model.html","id":null,"dir":"Reference","previous_headings":"","what":"submit a nonmem model to slurm in parallel — submit_nonmem_model","title":"submit a nonmem model to slurm in parallel — submit_nonmem_model","text":"submit nonmem model slurm parallel","code":""},{"path":"/reference/submit_nonmem_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"submit a nonmem model to slurm in parallel — submit_nonmem_model","text":"","code":"submit_nonmem_model(   .mod,   partition = get_slurm_partitions(),   ncpu = 1,   overwrite = FALSE,   dry_run = FALSE,   ...,   slurm_job_template_path = getOption(\"slurmtools.slurm_job_template_path\"),   submission_root = getOption(\"slurmtools.submission_root\"),   bbi_config_path = getOption(\"slurmtools.bbi_config_path\"),   slurm_template_opts = list() )"},{"path":"/reference/submit_nonmem_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"submit a nonmem model to slurm in parallel — submit_nonmem_model","text":".mod path model bbi nonmem model object partition name partition submit model ncpu number cpus run model overwrite whether overwrite existing model results dry_run return command invoked, without invoking ... arguments pass processx::run slurm_job_template_path path slurm job template submission_root directory track job submission scripts output bbi_config_path path bbi.yaml file bbi configuration slurm_template_opts choose slurm template","code":""}]
